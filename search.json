[{"title":"Hello World","url":"/2020/10/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"HBase","url":"/2020/10/05/HBase/","content":"HBase在HBase环境下，创建student表\n进入HBase\n\ncd /usr/local/hbase/bin./hbase shell\n\n\n创建student表\n\n&gt; create &#x27;student&#x27;,&#x27;info&#x27;&gt; put &#x27;student&#x27;,&#x27;1&#x27;,&#x27;info:name&#x27;,&#x27;James&#x27;&gt; put &#x27;student&#x27;,&#x27;1&#x27;,&#x27;info:gender&#x27;,&#x27;M&#x27;&gt; put &#x27;student&#x27;,&#x27;1&#x27;,&#x27;info:age&#x27;,&#x27;35&#x27;&gt; put &#x27;student&#x27;,&#x27;2&#x27;,&#x27;info:name&#x27;,&#x27;SmithGr&#x27;&gt; put &#x27;student&#x27;,&#x27;2&#x27;,&#x27;info:gender&#x27;,&#x27;M&#x27;&gt; put &#x27;student&#x27;,&#x27;2&#x27;,&#x27;info:age&#x27;,&#x27;33&#x27;&gt; exit\n\n读取HBase中student表\n编写python文件\n\nfrom pyspark import SparkConf, SparkContextconf = SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;ReadHBase&quot;)sc = SparkContext(conf = conf)host = &#x27;master&#x27;table = &#x27;student&#x27;conf = &#123;&quot;hbase.zookeeper.quorum&quot;: host, &quot;hbase.mapreduce.inputtable&quot;: table&#125;keyConv = &quot;org.apache.spark.examples.pythonconverters.ImmutableBytesWritableToStringConverter&quot;valueConv = &quot;org.apache.spark.examples.pythonconverters.HBaseResultToStringConverter&quot;hbase_rdd = sc.newAPIHadoopRDD(&quot;org.apache.hadoop.hbase.mapreduce.TableInputFormat&quot;,&quot;org.apache.hadoop.hbase.io.ImmutableBytesWritable&quot;,&quot;org.apache.hadoop.hbase.client.Result&quot;,keyConverter=keyConv,valueConverter=valueConv,conf=conf)count = hbase_rdd.count()hbase_rdd.cache()output = hbase_rdd.collect()for (k, v) in output:        print (k, v)\n\n\n执行代码\n\nspark-submit examples/readhbase.py\n\n向HBase写入数据\n编写python文件\n\nfrom pyspark import SparkConf, SparkContextconf = SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;ReadHBase&quot;)sc = SparkContext(conf = conf)host = &#x27;master&#x27;table = &#x27;student&#x27;keyConv = &quot;org.apache.spark.examples.pythonconverters.StringToImmutableBytesWritableConverter&quot;valueConv = &quot;org.apache.spark.examples.pythonconverters.StringListToPutConverter&quot;conf = &#123;&quot;hbase.zookeeper.quorum&quot;: host,&quot;hbase.mapred.outputtable&quot;: table,&quot;mapreduce.outputformat.class&quot;: &quot;org.apache.hadoop.hbase.mapreduce.TableOutputFormat&quot;,&quot;mapreduce.job.output.key.class&quot;: &quot;org.apache.hadoop.hbase.io.ImmutableBytesWritable&quot;,&quot;mapreduce.job.output.value.class&quot;: &quot;org.apache.hadoop.io.Writable&quot;&#125;rawData = [&#x27;3,info,name,Rongcheng&#x27;,&#x27;3,info,gender,M&#x27;,&#x27;3,info,age,26&#x27;,&#x27;4,info,name,Guanhua&#x27;,&#x27;4,info,gender,M&#x27;,&#x27;4,info,age,27&#x27;]sc.parallelize(rawData).map(lambda x: (x[0],x.split(&#x27;,&#x27;))).saveAsNewAPIHadoopDataset(conf=conf,keyConverter=keyConv,valueConverter=valueConv)\n\n\n执行代码\n\nspark-submit examples/writehbase.py\n\n"},{"title":"Leetcode刷题","url":"/2020/10/05/LeetcodeProblem/","content":"Leetcode刷题数据结构"},{"title":"Nginx学习","url":"/2020/10/05/Nginx/","content":"Nginx学习一、集群1、什么是集群（分布式服务器架构）\n集：合在一起、放在一起\n群：一堆、很多\n服务器架构集群：多台服务器组成的响应大并发，高数据量访问的架构体系。\n特点：\n成本高\n能够降低单台服务器的压力，使流量平均分配到多台服务器\n使网站服务架构更加安全稳定\n\n\n\n\n服务器：提供某种或者多种服务（功能）的机器（计算机）\n硬件：性能较好的电脑主机\n软件：实现各种服务支持的协议的软件\n\n\n\n1.1、web服务软件\n功能：提供http、https协议的服务器，网站网页访问的功能。\n服务\napache：老牌的服务器软件，功能多并且稳定，支持多种配置，lamp环境\nnginx:（俄罗斯人开发）安装简单小巧，并发量高，正在发展中，可以做web服务器、代理（反代理）服务器、邮箱服务器，lnmp环境\n国内淘宝定制版的nginx:tengine（由淘宝网发起的web服务器项目，它在nginx的基础上针对大访问量网站的需求，添加了很多高级功能和特性\nIIS：微软公司，为ASP脚本使用，可以通过fast-cgi（网络接口服务）的方式使用php\nlighttpd：德国开发软件，小巧，提供web服务支持，cpu占有率低，访问速度快\n\n\n\n1.2、数据库\n关系型数据库（RDBMS）\nmysql：开源，属于oracle\nmariadb：mysql的一个分支，语法类似于mysql\npostgresql：加州伯克利大学，学院派\noracle：大型商业数据库\nsqlserver：微软数据库\nDB2：IBM公司的数据库\nsqllite3：手机端（iOS和安卓）使用\n\n\n非关系型数据库\nmemcached\nredis\nmongodb\n\n\n\n1.3、负载均衡　　负载均衡服务器，分发请求到不同的服务器，使流量平均分配。\n　　服务器死机，称为宕机。\n\n硬件级别：F5，性能好，价格高\n软件级别：性价比高\nlvs：Linux下分发软件\nnginx：upstream功能分发\n\n\n\n1.4、资源服务器　　资源服务器存储静态资源，css、js、图片、视频等。一般此服务器会有硬盘（ssd固态）读写快速，带宽更大。\n1.5、反向代理　　反向代理服务器具有代理请求到对应的服务器的功能，也具有缓存的功能。\n\n代理服务器：举个栗子，a要访问c，但a不能访问c；b可以访问c，a可以访问c；所以a告诉b，帮忙访问c，把c的数据返回给a。\n正向代理：内网访问外网\n反向代理：外网访问内网\nsquid\nvarnish：高性能的开源http加速器。\nnginx\n\n\n\n\n\n1.6、高可用　　高可用服务器，用来监控负载均衡服务器，如果一旦负载均衡服务器宕机，会接替负载均衡服务器的工作，继续进行网络的分发工作。可以认为是负载均衡服务器的备用服务器。\n\nheartbit：心脏敲击\nkeeplive：保持活跃\n\n1.7、缓存软件\nmemcached\nredis\n\n1.8、cdn内容分发　　cdn：（Content Delivery Network）内容分发网络。基本思路是尽可能避开影响速度的瓶颈和环节，通过在网络各处放置节点服务器所构成的在现有的互联网基础之一的一层智能虚拟网络，cdn系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。其目的是使用户可就近取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度。\n\n"},{"title":"Docker学习","url":"/2020/10/05/docker/","content":"Docker学习\n\n1.Docker简介1.1 什么是虚拟化　　在计算机中，虚拟化（Virtualization）是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可分割的障碍，使用户可以比原来的组态更好的方式来应用这些资源。这些资源的新虚拟部分是不受现有资源的架设方式、地域或物理组态所限制的。一般所指的虚拟化资源包括计算能力和资料存储。\n　　虚拟化的技术有很多，例如：软件虚拟化、硬件虚拟化、内存虚拟化、网络虚拟化、桌面虚拟化、服务虚拟化和虚拟机等。\n1.2 什么是Docker　　Docker是一个开源项目，诞生于2013年初，基于Go语言实现的。后来加入Linux基金会，遵从Apache2.0协议，项目代码在Github上进行维护。\n　　Docker的基础是Linux，与虚拟机不同的是，Docker只能虚拟出与宿主机相同的容器，但是占用的空间非常小，运行效率非常高。\n1.3 Docker的组件\n服务器与客户端 　　Docker是一个客户端与服务器（C/S）架构程序。客户端向服务器或守护进程发出请求，服务器或守护进程将完成工作并返回结果。\n镜像与容器 　　镜像是构建Docker的基石。用户基于镜像来运行自己的容器。镜像也是Docker生命周期中的“构建部分”。镜像是基于联合文件系统的一种层式结构，有一系列指令一步一步构建出来。　　容器是基于镜像启动起来的，容器中可以运行一个或多个进程。镜像是Docker生命周期中的构建或是打包阶段，而容器则是启动或执行阶段。容器时基于镜像启动，一旦容器启动完成后，就可以在容器中安装自己需要的软件和服务。\nRegistry（注册中心）　　Docker用Registry来保存用户构建的镜像。分为公有和私有两部分，Docker公司运营公共的Registry叫做Docker Hub。用户可以在Docker Hub注册账号，分享并保存自己的镜像。（Docker Hub 下在巨慢，可以构建自己的Registry）。\n\n　　Registry Hub\n2.Docker安装与启动2.1 安装Docker\nubuntu 安装\napt-get 更新 sudo apt-get update\n安装Docker sudo apt-get install docker.io\n查看版本 docker -v\n\n\ncentos 安装\nyum源更新 sudo yum update\n安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是device-mapper驱动依赖的 sudo yum install -y yum-utils device-mapper-presistent-data lvm2\n设置yum源为阿里源 sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n安装Docker sudo yum install docker-ce\n查看版本 docker -v\n\n\n\n2.2 设置ustc的镜像　　ustc是老牌的Linux镜像服务提供者了，还在遥远的Ubuntu5.04版本的时候就在用。ustc的docker镜像加速器速度很快。ustc docker mirror 的优势之一就是不需要注册，是真正的提供服务。\n　　https://lug.ustc.edu.cn/wiki/mirrors/help/docker\n　　编辑该文件：\n　　vim /etc/docker/daemon.json　　　　在文件中添加如下内容： \n&#123;&quot;registry-mirrors&quot;:[&quot;https://docker.mirrors.ustc.edu.cn&quot;]&#125;\n\n\n2.3 Docker的启动与停止systemctl命令是系统服务管理器指令\n\n启动docker systemctl start docker\n停止docker systemctl stop docker\n重启docker systemctl restart docker\n查看docker状态 systemctl status docker\n开机启动 systemctl enable docker\n查看docker概要信息 docker info\n查看docker帮助文档 docker --help\n\n\n\n3. 常用命令3.1 镜像相关命令\n查看镜像 docker images \n\n\n\n\n字段\n含义\n\n\n\nREPOSITORY\n镜像名称\n\n\nTAG\n镜像标签\n\n\nIMAGE ID\n镜像ID\n\n\nCREATED\n镜像的创建日期\n\n\nSIZE\n镜像大小\n\n\n\n搜索镜像（需要从网络中查找需要的镜像） docker search 镜像名称 \n\n\n\n\n字段\n含义\n\n\n\nNAME\n仓库名称\n\n\nDESCRIPTION\n镜像描述\n\n\nSTARS\n用户评价，反应一个镜像的受欢迎程度\n\n\nOFFICIAL\n是否官方\n\n\nAUTOMATED\n自动创建，表示该镜像有Docker Hub自动构建流程创建的\n\n\n\n拉取镜像（从中央仓库下载到本地） docker pull 镜像名称 \n  例如，下载centos7镜像   docker pull centos:7\n\n删除镜像 docker rmi 镜像ID   删除所有镜像   docker rmi `docker images -q`    注意`,不是’\n\n\n\n\n3.2 容器相关命令\n查看容器\n查看正在运行的容器 docker ps\n查看所有容器 docker ps -s\n查看最后一次运行的容器 docker ps -l\n查看停止的容器 docker ps -f status=exited\n\n\n创建与启动容器\n创建容器命令与参数说明 docker run [参数]\n\n\n\n\n\n\n参数\n含义\n\n\n\n-i\n表示运行容器\n\n\n-t\n表示容器启动后会进入其命令行，加入这两个参数后，容器创建就能登录进去，即分配一个伪终端\n\n\n–name\n为创建的容器命名\n\n\n-v\n表示目录映射关系（前者是宿主机目录，后者是映射到宿主机的目录），可以使用多个-v做多个目录或文件映射。注意，最好做目录映射，在宿主机上做修改，然后共享到容器上\n\n\n-d\n表示创建一个守护式容器在后台运行（这样创建的容器不会自动登录容器，如果只加-i,-t两个参数，创建后就会自动进入容器\n\n\n-p\n表示端口映射，前者是宿主机端口，后者是容器内的映射端口，可以使用多个-p做多个端口映射\n\n\n"},{"title":"json学习","url":"/2020/10/05/json%E5%AD%A6%E4%B9%A0/","content":"json学习"},{"title":"notebook 主题设置","url":"/2020/10/05/notebook%20%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/","content":"主题\n安装jupyter主题\n\npip install --upgrade jupyterthemes\n\n\n操作\n\n查看主题列表\n\njt -l\n\n\n更换主题\n\njt -t 主题名称\n\n\n恢复默认\n\njt -r\n\n\n\n字体\n字体css位置\n\n\\Anaconda\\Lib\\site-packages\\notebook\\static\\components\\codemirror\\lib\\codemirror.css\n\n\n字体样式\n在.css 文件的前几行，可直接修改\n\n字体大小\n247行，**px\n\n行间距(如果不合适，会非常难受)\n字体大小的下面\nline-height:**px\n\n\n"},{"title":"nodejs及nmp","url":"/2020/10/05/nodejs%E5%8F%8Anpm/","content":"包管理工具nmp包含在nodejs中，在安装时一并安装好了\nnodejs安装\n去官网下载最新版本(nodejs官网)\n\n\n\n点击安装，选择安装路径，不建议安装在c盘，其他自己选择\n\n\n\n等待安装完成即可\n检查是否成功，打开cmd命令行，输入如下命令\n\nnode -vnpm -v\n\n\n如上图，就成功了\nnpm的配置\n在nodejs安装路径下(例如：E:\\nodejs)，新建两个文件夹，node_cache和node_global，在命令行输入如下命令\n\nnpm config set prefix &quot;E:\\nodejs\\node_global&quot;npm config set cache &quot;E:\\nodejs\\node_cache&quot;\n\n\n因为服务器在国外，使用npm包管理工具时速度可能会很慢，所以可以配置镜像加速\n\nnpm config set registry=http://registry.nom.taobao.org\n\n\n可以使用如下命令查看配置信息\n\nnpm config list\n\n配置环境变量\n在系统变量中新增NODE_PATH E:\\nodejs\\node_global\n\n\n\n在系统变量的Path中新增E:\\nodejs\\node_global\n\n\n到此为止，相关配置全部完毕了，可以正常使用了。\nnpm入门级命令\n\n\n命令\n功能\n\n\n\nnpm install appname -g\n安装插件\n\n\nnpm uninstall appname -g\n卸载插件\n\n\nnpm update appname -g\n更新插件\n\n\nnpm list\n查看安装的插件\n\n\n-g:表示全局，相当于配置了全局变量，建议 -g\n"}]